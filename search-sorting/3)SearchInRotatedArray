problem:(Search in Rotated Sorted Array)
   There is an integer array nums sorted in ascending order (with distinct values).

Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].
Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.
You must write an algorithm with O(log n) runtime complexity.

Input:nums = [4,5,6,7,0,1,2], target = 0
Output:4

1)First you should get a thought that,In how many ways that array will look like 
             (ex:[4,5,6,7,1,2,3]->>In this case when we find the mid value and split the array ,It will become [4,5,6,7],[1,2,3].
			                       it is perfect and we can search target element based on where it is(first array or second array)
			 [4,5,6,1,2,3,4]->>But here in this case the array will be splitted into [4,5,6,1],[2,3,4] which is not perfect.
			   so based on these two we have to write the code.
			  
2)Source code:

				class Solution
				{
					int search(int A[], int l, int h, int key)
					{
						while(l<=h)
						{
							int mid=(l+h)/2;
							if(A[mid]==key)
							  return mid;
							else if(A[mid]>=A[l])        //perfect split(and there may be a chance of elements that are greater than mid on the second part).
							{
								if(key>=A[l] && key<A[mid])
								 h=mid-1;
								else 
								 l=mid+1;
							}
							else                          //not perfect(mid value is less than element at lower index).
							{
								if(key<=A[h] && key>A[mid])
								 l=mid+1;
								else
								 h=mid-1;
							}
						}
						return -1;
					}
				}
				
3)Time Complexity:O(log N)
4)Space Complexity:1
   