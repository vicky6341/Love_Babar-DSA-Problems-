problem:(Minimum Swaps to Sort).
  Given an array of n distinct elements. Find the minimum number of swaps required to sort the array in strictly increasing order.
  
Input:nums = {10, 19, 6, 3, 5}
Output:2
Explanation: swap 10 with 3 and swap 19 with 5.

1)create an arraylist for each element with value at first index and index at second.
  i.e.. in this case <10,0>,<19,1>,<6,2>.................. and append these all into final arraylist.
2)then sort the the final array list.(in this case <3,3>,<5,4> base on value sort the arraylist.
3)iterate , such that if(i==l.get(i).get(1))->then it is at correct index.If not swap the arraylist like  <3,3> should be at third index and <6,3> will be at 0 index after first swap ................


4)Source Code:

				 class Solution
				{
					//Function to find the minimum number of swaps required to sort the array.
					public  int minSwaps(int nums[])
					{
						int n=nums.length;
						ArrayList<ArrayList<Integer>> l=new ArrayList<>();
						for(int i=0;i<n;i++)
						{
							ArrayList<Integer> l1=new ArrayList<>();
							l1.add(nums[i]);
							l1.add(i);
							l.add(l1);
						}
						Collections.sort(l,new Comparator<ArrayList<Integer>>(){
							@Override
							public int compare(ArrayList<Integer> l1,ArrayList<Integer> l2)
							{
								return l1.get(0).compareTo(l2.get(0));
							}
						});
						int c=0;
						int i=0;
						while(i<n)
						{
							if(i==l.get(i).get(1))
								i+=1;
							else
							{
								c+=1;
								swap(l,i);
							}
						}
						return c;
					}
					public static void swap(ArrayList<ArrayList<Integer>> l,int i)
					{
						ArrayList<Integer> temp1=l.get(i);
						int k=l.get(i).get(1);
						ArrayList<Integer> temp2=l.get(k);
						l.set(k,temp1);
						l.set(i,temp2);
					}
				}
				
5)Time Complexity:O(nlogn).
6)Space Complexity:O(n).