problem:(Majority Element).
  Given an array A of N elements. Find the majority element in the array. A majority element in an array A of size N is an element that appears strictly more than N/2 times in the array.
Input:N = 5,A[] = {3,1,3,3,2} 
Output:3
Explaination:Since, 3 is present more than N/2 times, so it is the majority element.

[The Boyer-Moore voting algorithm is one of the popular optimal algorithms which is used to find the majority element among the given elements that have more than N/ 2 occurrences,which works in O(N) time complexity and O(1) space complexity.]
[Moore's algo is based on the assumption that you have a majority element(i.e., count > floor(n/2)) in your list. So choose a input where there's definitely a majority element, otherwise you'd think this algo is not working.]

1)Source Code:

	class Solution
	{
		static int majorityElement(int a[], int size)
		{
			int c=0,el=-1;
		   for(int i=0;i<size;i++)
		   {
			   if(c==0)
				el=a[i];
			   if(el==a[i])
				c+=1;
			   else
				c-=1;
		   }
		   return el;
		}
	}

2)Time Complexity:O(N).
3)Space Complexity:O(1).

--------------------------------------------------------------------------------------------------------------------
If there is no such majority element in an array ,then return -1.
1)Source Code:
   
		class Solution
		{
			static int majorityElement(int a[], int size)
			{
				int c=0,el=-1;
			for(int i=0;i<size;i++)
			{
				if(c==0)
					el=a[i];
				if(el==a[i])
					c+=1;
				else
					c-=1;
			}
			c=0;
			for(int i=0;i<size;i++)
			{
				if(a[i]==el)
					c+=1;
			}
			if(c>(size/2))return el;
			return -1;
			}
		}
2)Time Complexity:O(N).
3)Space Complexity:O(1).