problem statement:(First and last occurrences of x)
    Given a sorted array arr containing n elements with possibly some duplicate, the task is to find the first and last occurrences of an element x in the given array.
Note: If the number x is not found in the array then return both the indices as -1.

Input:n=9, x=5
arr[] = { 1, 3, 5, 5, 5, 5, 67, 123, 125 }

Output:2 5

Explanation:First occurrence of 5 is at index 2 and last occurrence of 5 is at index 5.

1)sorted array to be searched->>>>>>(use Binary Search)
2)pass an extra variable (tog) with value 1 ->to find lower index,
  and 2-> to find upper index.
3)As the array contains repeated search element ,if(a[mid]==x)->we have to search the left part of mid.
                                                              -> we have to search the right part of mid.
                                                              (Before doing the above ,we have to store the mid index,In case if there is no repeated search element in 
                                                               array,we have to return that index as lower and upper bound).
4)Incase there is no such element(That we want to search in array) we have to return -1.
5)Source code:
                class Main
                {
                    public static void main(String[] args)
                    {
                    int[] a=new int[]{ 1, 3, 5, 5, 5, 5, 67, 123, 125};
                    int l=search(a,0,a.length-1,5,1);
                    int h=search(a,0,a.length-1,5,2);
                    System.out.println(l+" "+h);
                    }
                    public static int search(int[] a,int l,int h,int x,int tog)
                    {
                        int res=-1;
                    while(l>=0 && h<=a.length-1 && l<=h)
                    {
                        int mid=(l+h)/2;
                        if(a[mid]>x)
                        h=mid-1;
                        else if(a[mid]<x)
                        l=mid+1;
                        else
                        {
                        res=mid;
                        if(tog==1)
                        h=mid-1;
                        else
                        l=mid+1;
                        }
                    }
                    return res;
                    }
                }

6)Time Complexity:O(logn)
7)Space Complexity:1

