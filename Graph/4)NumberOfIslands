using BFS


1)Source Code:
  
                    class Pair{
                        int i;
                        int j;
                        Pair(int i,int j)
                        {
                            this.i=i;
                            this.j=j;
                        }
                    }
                    class Solution {
                        // Function to find the number of islands.
                        public int numIslands(char[][] grid) {
                            int c=0;
                            int[][] vis=new int[grid.length][grid[0].length];
                            for(int i=0;i<grid.length;i++)
                                for(int j=0;j<grid[0].length;j++)
                                vis[i][j]=0;
                        for(int i=0;i<grid.length;i++)
                        {
                            for(int j=0;j<grid[0].length;j++)
                            {
                                if(vis[i][j]==0 && grid[i][j]!='0')
                                {
                                    c+=1;
                                    find(vis,grid,i,j);
                                }
                            }
                        }
                        return c;
                        }
                        public static void find(int[][] vis,char[][] grid,int i,int j)
                        {
                            LinkedList<Pair> l=new LinkedList<>();
                            Pair p=new Pair(i,j);
                            l.add(p);
                            vis[i][j]=1;
                            while(!l.isEmpty())
                            {
                                Pair k=l.removeFirst();
                                int m=k.i;
                                int n=k.j;
                                if( m-1>=0 && m-1<grid.length && n>=0 && n<grid[0].length && vis[m-1][n]==0 && grid[m-1][n]=='1'){ vis[m-1][n]=1;l.add(new Pair(m-1,n));}
                                if( m >=0 && m<grid.length && n-1>=0 && n-1<grid[0].length && vis[m][n-1]==0  && grid[m][n-1]=='1'){vis[m][n-1]=1;l.add(new Pair(m,n-1));}
                                if( m+1>=0 && m+1<grid.length && n>=0 && n<grid[0].length && vis[m+1][n]==0 && grid[m+1][n]=='1'){vis[m+1][n]=1;l.add(new Pair(m+1,n));}
                                if( m>=0 && m<grid.length && n+1>=0 && n+1<grid[0].length && vis[m][n+1]==0 && grid[m][n+1]=='1'){vis[m][n+1]=1;l.add(new Pair(m,n+1));}
                                if( m-1>=0 && m-1<grid.length && n-1>=0 && n-1<grid[0].length && vis[m-1][n-1]==0 && grid[m-1][n-1]=='1'){vis[m-1][n-1]=1;l.add(new Pair(m-1,n-1));}
                                if( m-1>=0 && m-1<grid.length && n+1>=0 && n+1<grid[0].length && vis[m-1][n+1]==0 && grid[m-1][n+1]=='1'){vis[m-1][n+1]=1;l.add(new Pair(m-1,n+1));}
                                if( m+1>=0 && m+1<grid.length && n-1>=0 && n-1<grid[0].length && vis[m+1][n-1]==0 && grid[m+1][n-1]=='1'){vis[m+1][n-1]=1;l.add(new Pair(m+1,n-1));}
                                if( m+1>=0 && m+1<grid.length && n+1>=0 && n+1<grid[0].length && vis[m+1][n+1]==0 && grid[m+1][n+1]=='1'){vis[m+1][n+1]=1;l.add(new Pair(m+1,n+1));}
                            }
                        }
                    }