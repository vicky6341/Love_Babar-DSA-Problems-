class Solution{
    static char[][] fill(int n, int m, char a[][])
    {
        int[][] vis=new int[n][m];
        for(int i=0;i<n;i++)
         for(int j=0;j<m;j++)
           vis[i][j]=0;
        for(int j=0;j<m;j++)
        {
            if(a[0][j]=='O' && vis[0][j]!=1)
               dfs(0,j,a,vis);
        }
        for(int j=0;j<m;j++)
        {
            if(a[n-1][j]=='O' && vis[n-1][j]!=1)
              dfs(n-1,j,a,vis);
        }
        for(int i=0;i<n;i++)
        {
            if(a[i][0]=='O' && vis[i][0]!=1)
              dfs(i,0,a,vis);
        }
        for(int i=0;i<n;i++)
        {
            if(a[i][m-1]=='O' && vis[i][m-1]!=1)
             dfs(i,m-1,a,vis);
        }
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(vis[i][j]!=1 && a[i][j]=='O')
                  a[i][j]='X';
            }
        }
        return a;
    }
    public static void dfs(int i,int j,char a[][],int[][] vis)
    {
        vis[i][j]=1;
        if(i-1>=0 && i-1<a.length && j>=0 && j<a[0].length && vis[i-1][j]!=1 && a[i-1][j]=='O')
          dfs(i-1,j,a,vis);
        if(i+1>=0 && i+1<a.length && j>=0 && j<a[0].length && vis[i+1][j]!=1 && a[i+1][j]=='O')
          dfs(i+1,j,a,vis);
        if(i>=0 && i<a.length && j-1>=0 && j-1<a[0].length && vis[i][j-1]!=1 && a[i][j-1]=='O')
          dfs(i,j-1,a,vis);
        if(i>=0 && i<a.length && j+1>=0 && j+1<a[0].length && vis[i][j+1]!=1 && a[i][j+1]=='O')
          dfs(i,j+1,a,vis);
    }
    
}