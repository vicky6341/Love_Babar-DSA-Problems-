//{ Driver Code Starts
// Initial Template for Java

import java.util.*;
import java.lang.*;
import java.io.*;

// Position this line where user code will be pasted.

class GFG {
    public static void main(String[] args) throws IOException {
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        while (T-- > 0) {
            int n = sc.nextInt();
            int m = sc.nextInt();
            int[][] grid = new int[n][m];

            for (int i = 0; i < n; i++) {

                for (int j = 0; j < m; j++) {
                    grid[i][j] = sc.nextInt();
                }
            }
            int[] source = new int[2];
            for (int i = 0; i < 2; i++) {
                int x = sc.nextInt();
                source[i] = x;
            }
            int[] dest = new int[2];
            for (int i = 0; i < 2; i++) {
                int x = sc.nextInt();
                dest[i] = x;
            }
            Solution ob = new Solution();
            int ans = ob.shortestPath(grid, source, dest);
            System.out.println(ans);
        }
    }
}
// } Driver Code Ends


// User function Template for Java
class  Pair
{
    int i;
    int j;
    int d;
    Pair(int i,int j,int d)
    {
        this.i=i;
        this.j=j;
        this.d=d;
    }
}
class Solution {

    int shortestPath(int[][] grid, int[] source, int[] destination) {
        int m=grid.length;
        int n=grid[0].length;
        int[][] dis=new int[m][n];
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                dis[i][j]=Integer.MAX_VALUE;
            }
        }
        LinkedList<Pair> l=new LinkedList<>();
        l.add(new Pair(source[0],source[1],0));
        while(!l.isEmpty())
        {
            Pair p1=l.removeFirst();
            int i=p1.i;
            int j=p1.j;
            int d=p1.d;
            if(i==destination[0] && j==destination[1])
             return d;
            if(i-1>=0 && i-1<m && j>=0 && j<n && grid[i-1][j]==1 && dis[i-1][j]>d+1)
            {
                dis[i-1][j]=d+1;
                l.add(new Pair(i-1,j,d+1));
            }
            if(i+1>=0 && i+1<m && j>=0 && j<n && grid[i+1][j]==1 && dis[i+1][j]>d+1)
            {
                dis[i+1][j]=d+1;
                l.add(new Pair(i+1,j,d+1));
            }
            if(i>=0 && i<m && j-1>=0 && j-1<n && grid[i][j-1]==1 && dis[i][j-1]>d+1)
            {
                dis[i][j-1]=d+1;
                l.add(new Pair(i,j-1,d+1));
            }
            if(i>=0 && i<m && j+1>=0 && j+1<n && grid[i][j+1]==1 && dis[i][j+1]>d+1)
            {
                dis[i][j+1]=d+1;
                l.add(new Pair(i,j+1,d+1));
            }
        }
        return -1;
    }
}
