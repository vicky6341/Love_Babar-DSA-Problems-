//{ Driver Code Starts
import java.util.*;
import java.lang.*;
import java.io.*;
class GFG
{
    public static void main(String[] args) throws IOException
    {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(br.readLine().trim());
        while(T-->0)
        {
            int n = Integer.parseInt(br.readLine().trim());
            String[] wordList = new String[n];
            for(int i = 0; i < n; i++){
                wordList[i] = br.readLine().trim();
            }
            String startWord, targetWord;
            startWord = br.readLine().trim();
            targetWord = br.readLine().trim();
            Solution obj = new Solution();
            int ans = obj.wordLadderLength(startWord, targetWord, wordList);
            System.out.println(ans);
       }
    }
}

// } Driver Code Ends

class Pair
{
    String str;
    int i;
    Pair(String str,int i)
    {
        this.str=str;
        this.i=i;
    }
}
class Solution
{
    public int wordLadderLength(String startWord, String targetWord, String[] wordList)
    {
        HashMap<String,Integer> h=new HashMap<>();
        for(int i=0;i<wordList.length;i++)
          h.put(wordList[i],1);
        LinkedList<Pair> l=new LinkedList<>();
        l.add(new Pair(startWord,1));
        while(!l.isEmpty())
        {
            Pair p=l.removeFirst();
            String str=p.str;
            int n=p.i;
            if(str.equals(targetWord))
              return n;
            for(int i=0;i<str.length();i++)
            {
                for(int j=97;j<=122;j++)
                {
                    String res=str.substring(0,i)+(char)j+str.substring(i+1,str.length());
                    if(h.containsKey(res) && h.get(res)==1)
                    {
                        h.put(res,-1);
                        l.add(new Pair(res,n+1));
                    }
                    
                }
            }
        }
        return 0;
    }
}