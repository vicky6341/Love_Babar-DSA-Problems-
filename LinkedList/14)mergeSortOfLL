problem:(Merge Sort for Linked List)

  Given Pointer/Reference to the head of the linked list, the task is to Sort the given linked list using Merge Sort.
Note: If the length of linked list is odd, then the extra node should go in the first list while splitting.

Input:
N = 5
value[]  = {3,5,2,4,1}
Output: 1 2 3 4 5
Explanation: After sorting the given
linked list, the resultant matrix
will be 1->2->3->4->5.

1)Source Code:
 
			  class Solution
			{
				//Function to sort the given linked list using Merge Sort.
				static Node mergeSort(Node head)
				{
					if(head==null || head.next==null)
					  return head;
					Node mid=middle(head);
					Node temp=head;
					while(temp.next!=mid)
					  temp=temp.next;
					temp.next=null;
					Node left=mergeSort(head);
					Node right=mergeSort(mid);
					return merge(left,right);
				}
				public static Node middle(Node head)
				{
					Node slow=head;
					Node fast=head;
					
					while(fast!=null && fast.next!=null)
					{
						slow=slow.next;
						fast=fast.next.next;
					}
					return slow;
				}
				public static Node merge(Node head1,Node head2)
				{
					Node temp1=head1,temp2=head2;
					Node temp=new Node(-1);
					Node head=temp;
					while(temp1!=null && temp2!=null)
					{
						if(temp1.data<temp2.data)
						{
							temp.next=temp1;
							temp=temp1;
							temp1=temp1.next;
						}
						else
						{
							temp.next=temp2;
							temp=temp2;
							temp2=temp2.next;
						}
					}
					if(temp1!=null)
					 temp.next=temp1;
					else
					  temp.next=temp2;
					return head.next;
				}
			}
			
2)Expected Time Complexity: O(N*Log(N))
3)Expected Auxiliary Space: O(N)