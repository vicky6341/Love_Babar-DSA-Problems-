problem:(Reverse a Linked List in groups of given size).

  Given a linked list of size N. The task is to reverse every k nodes (where k is an input to the function) in the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should be considered as a group and must be reversed (See Example 2 for clarification).
  
Input:
LinkedList: 1->2->2->4->5->6->7->8
K = 4
Output: 4 2 2 1 8 7 6 5 
Explanation: 
The first 4 elements 1,2,2,4 are reversed first 
and then the next 4 elements 5,6,7,8. Hence, the 
resultant linked list is 4->2->2->1->8->7->6->5.


1)Find kth node in each iteration first.
2)and then reverse each part and iterate unitl the end.

3)Source Code:
 
				  class Solution
				{
				   public Node rvs(Node node)
					{
						Node curr=node,temp=node,prev=null;
						while(curr!=null)
						{
							temp=curr.next;
							curr.next=prev;
							prev=curr;
							curr=temp;
						}
						return prev;
					}
					public  Node reverse(Node node, int k)
					{
					   Node temp=node,prev=null;
					   while(temp!=null)
					   {
							Node kthnode=find(temp,k);
							if(kthnode==null)
							{
								if(prev==null)
								  return rvs(temp);
								prev.next=rvs(temp);
								break;
							}
							Node nhead=kthnode.next;
							kthnode.next=null;
							Node newhead=rvs(temp);
							if(node==temp)
							{
								node=kthnode;
							}
							else
							{
								prev.next=newhead;
							}
							prev=temp;
							temp=nhead;
						}
						return node;
					}
					public static Node find(Node node,int k)
					{
						Node temp=node,prev=null;
						int c=1;
						while(temp!=null && c<=k)
						{
							c+=1;
							prev=temp;
							temp=temp.next;
						}
						if(c<=k)
						  return null;
						return prev;
					}
				}
3)Time Complexity:O(N).
4)Space Complexity:O(1).		